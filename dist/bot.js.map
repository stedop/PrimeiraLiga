{"version":3,"sources":["bot.js"],"names":["Object","defineProperty","exports","value","_defaults2","require","_defaults3","_interopRequireDefault","_axios","_axios2","_snoowrap","_snoowrap2","_dot","_dot2","obj","__esModule","default","bot","constructor","_ref","arguments","length","undefined","userAgent","clientId","clientSecret","refreshToken","subreddit","apiKey","leagueId","Error","subbreddit","__initRedditClient","__initApiClient","__initTemplateEngine","redditClient","clientArgs","baseURL","timeout","headers","apiClient","create","templateEngine","process","templateSettings","strip","path","getStandings","_this","data","standingsURI","Promise","resolve","reject","get","then","response","standings","error","getCompetition","_this2","competitionUri","competition","updateSidebar","_this3","desc","sidebar","getSubreddit","editSettings","completed","catch","run","_this4"],"mappings":"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","file":"bot.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _defaults2 = require('lodash/defaults');\n\nvar _defaults3 = _interopRequireDefault(_defaults2);\n\nvar _axios = require('axios');\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nvar _snoowrap = require('snoowrap');\n\nvar _snoowrap2 = _interopRequireDefault(_snoowrap);\n\nvar _dot = require('dot');\n\nvar _dot2 = _interopRequireDefault(_dot);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nclass bot {\n\n    /**\n     * @summary initialises the bot\n     *\n     * @param {string} [userAgent] A unique description of what your app does. This argument is not necessary when Snoowrap\n     is running in a browser.\n     * @param {string} [clientId] The client ID of your app (assigned by reddit)\n     * @param {string} [clientSecret] The client secret of your app (assigned by reddit). If you are using a refresh token\n     with an installed app (which does not have a client secret), pass an empty string as your `clientSecret`.\n     * @param {string} [refreshToken] A refresh token for your app.\n     * @param {string} [subreddit] The subreddit name we are going to be managing\n     * @param {string} [apiKey] Key for the stats api\n     * @param {string} [leagueId] Id for the competition\n     */\n    constructor() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            userAgent = _ref.userAgent,\n            clientId = _ref.clientId,\n            clientSecret = _ref.clientSecret,\n            refreshToken = _ref.refreshToken,\n            subreddit = _ref.subreddit,\n            apiKey = _ref.apiKey,\n            leagueId = _ref.leagueId;\n\n        if (clientId === undefined || clientSecret === undefined || refreshToken === undefined) {\n            throw new Error('Reddit Credentials not supplied');\n        }\n\n        if (apiKey === undefined) {\n            throw new Error('Api Key not supplied');\n        }\n\n        if (leagueId === undefined) {\n            throw new Error('Need a competition ID');\n        }\n\n        (0, _defaults3.default)(this, {\n            userAgent,\n            clientId,\n            clientSecret,\n            refreshToken,\n            subreddit,\n            apiKey,\n            leagueId\n        }, {\n            userAgent: null,\n            clientId: null,\n            clientSecret: null,\n            refreshToken: null,\n            subbreddit: null,\n            apiKey: null,\n            leagueId: 439\n        });\n\n        this.__initRedditClient();\n        this.__initApiClient();\n        this.__initTemplateEngine();\n    }\n\n    __initRedditClient() {\n        this.redditClient = new _snoowrap2.default({\n            userAgent: this.userAgent,\n            clientId: this.clientId,\n            clientSecret: this.clientSecret,\n            refreshToken: this.refreshToken\n        });\n    }\n\n    __initApiClient() {\n        var clientArgs = {\n            baseURL: 'http://api.football-data.org/v1/',\n            timeout: 10000,\n            headers: {\n                \"X-Auth-Token\": this.apiKey,\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        this.apiClient = _axios2.default.create(clientArgs);\n    }\n\n    __initTemplateEngine() {\n        this.templateEngine = _dot2.default.process({ templateSettings: { strip: false }, path: 'views/' });\n    }\n\n    getStandings() {\n        var _this = this;\n\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var standingsURI = \"competitions/\" + this.leagueId + \"/leagueTable\";\n\n        return new Promise(function (resolve, reject) {\n            _this.apiClient.get(standingsURI).then(function (response) {\n                data.standings = response.data;\n                resolve(data);\n            }, function (error) {\n                reject(error);\n            });\n        });\n    }\n\n    getCompetition() {\n        var _this2 = this;\n\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var competitionUri = \"competitions/\" + this.leagueId;\n        return new Promise(function (resolve, reject) {\n            _this2.apiClient.get(competitionUri).then(function (response) {\n                data.competition = response.data;\n                resolve(data);\n            }, function (error) {\n                reject(error);\n            });\n        });\n    }\n\n    updateSidebar() {\n        var _this3 = this;\n\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var subreddit = this.subreddit;\n        var desc = this.templateEngine.sidebar(data);\n        return new Promise(function (resolve, reject) {\n            _this3.redditClient.getSubreddit(subreddit).editSettings({\n                'description': desc\n            }).then(function () {\n                data.completed = {};\n                data.completed.updateSidebar = true;\n                resolve(data);\n            }).catch(function (error) {\n                reject(error);\n            });\n        });\n    }\n\n    run() {\n        var _this4 = this;\n\n        return new Promise(function (resolve, reject) {\n            _this4.getStandings().then(function (data) {\n                return _this4.updateSidebar(data);\n            }).then(function (data) {\n                resolve(data);\n            }).catch(function (error) {\n                reject(error);\n            });\n        });\n    }\n}\nexports.default = bot;\n//# sourceMappingURL=bot.js.map\n//# sourceMappingURL=bot.js.map"]}