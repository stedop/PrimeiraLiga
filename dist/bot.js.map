{"version":3,"sources":["bot.js"],"names":["Object","defineProperty","exports","value","_take2","require","_take3","_interopRequireDefault","_defaults2","_defaults3","_axios","_axios2","_snoowrap","_snoowrap2","_dot","_dot2","obj","__esModule","default","bot","constructor","_ref","arguments","length","undefined","userAgent","clientId","clientSecret","refreshToken","subreddit","apiKey","leagueSlug","leagueYear","Error","subbreddit","__initRedditClient","__initApiClient","__initTemplateEngine","redditClient","clientArgs","baseURL","timeout","headers","apiClient","create","templateEngine","process","log","path","getStandings","_this","standingsURI","Promise","resolve","reject","get","then","standings","data","error","id","updateSidebar","_this2","standingsData","getSubreddit","editSettings","sidebar","response","console","catch"],"mappings":"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","file":"bot.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _take2 = require('lodash/take');\n\nvar _take3 = _interopRequireDefault(_take2);\n\nvar _defaults2 = require('lodash/defaults');\n\nvar _defaults3 = _interopRequireDefault(_defaults2);\n\nvar _axios = require('axios');\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nvar _snoowrap = require('snoowrap');\n\nvar _snoowrap2 = _interopRequireDefault(_snoowrap);\n\nvar _dot = require('dot');\n\nvar _dot2 = _interopRequireDefault(_dot);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nclass bot {\n\n    /**\n     * @summary initialises the bot\n     *\n     * @param {string} [userAgent] A unique description of what your app does. This argument is not necessary when Snoowrap\n     is running in a browser.\n     * @param {string} [clientId] The client ID of your app (assigned by reddit)\n     * @param {string} [clientSecret] The client secret of your app (assigned by reddit). If you are using a refresh token\n     with an installed app (which does not have a client secret), pass an empty string as your `clientSecret`.\n     * @param {string} [refreshToken] A refresh token for your app.\n     * @param {string} [subreddit] The subreddit name we are going to be managing\n     * @param {string} [apiKey] Key for the stats api\n     * @param {string} [leagueSlug] the league identifier default is 'liga'\n     * @param {string} [leagueYear] the year identifier in the form order 16-17\n     */\n    constructor() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            userAgent = _ref.userAgent,\n            clientId = _ref.clientId,\n            clientSecret = _ref.clientSecret,\n            refreshToken = _ref.refreshToken,\n            subreddit = _ref.subreddit,\n            apiKey = _ref.apiKey,\n            leagueSlug = _ref.leagueSlug,\n            leagueYear = _ref.leagueYear;\n\n        if (clientId === undefined || clientSecret === undefined || refreshToken === undefined) {\n            throw new Error('Reddit Credentials not supplied');\n        }\n\n        if (apiKey === undefined) {\n            throw new Error('Api Key not supplied');\n        }\n\n        if (leagueSlug === undefined || leagueYear === undefined) {\n            throw new Error('Need a league and a year');\n        }\n\n        (0, _defaults3.default)(this, { userAgent, clientId, clientSecret, refreshToken, subreddit, apiKey, leagueSlug, leagueYear }, {\n            userAgent: null,\n            clientId: null,\n            clientSecret: null,\n            refreshToken: null,\n            subbreddit: null,\n            apiKey: null,\n            leagueSlug: \"liga\",\n            leagueYear: \"16-17\"\n        });\n\n        this.__initRedditClient();\n        this.__initApiClient();\n        this.__initTemplateEngine();\n    }\n\n    __initRedditClient() {\n        this.redditClient = new _snoowrap2.default({\n            userAgent: this.userAgent,\n            clientId: this.clientId,\n            clientSecret: this.clientSecret,\n            refreshToken: this.refreshToken\n        });\n    }\n\n    __initApiClient() {\n        var clientArgs = {\n            baseURL: 'https://sportsop-soccer-sports-open-data-v1.p.mashape.com/v1/',\n            timeout: 1000,\n            headers: {\n                \"X-Mashape-Key\": this.apiKey,\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        this.apiClient = _axios2.default.create(clientArgs);\n    }\n\n    __initTemplateEngine() {\n        this.templateEngine = _dot2.default.process({ log: false, path: \"./../views\" });\n    }\n\n    getStandings() {\n        var _this = this;\n\n        var standingsURI = \"leagues/\" + this.leagueSlug + \"/seasons/\" + this.leagueYear + \"/standings\";\n\n        return new Promise(function (resolve, reject) {\n            _this.apiClient.get(standingsURI).then(function (standings) {\n                resolve(standings.data.data.standings);\n            }, function (error) {\n                reject(new Error(\"Problem getting standings\", error.id));\n            });\n        });\n    }\n\n    updateSidebar() {\n        var _this2 = this;\n\n        var subreddit = this.subreddit;\n        var templateEngine = this.templateEngine;\n\n        this.getStandings().then(function (standingsData) {\n            standingsData = (0, _take3.default)(standingsData, 10);\n            _this2.redditClient.getSubreddit(subreddit).editSettings({\n                'description': templateEngine.sidebar(standingsData)\n            }).then(function (response) {\n                console.log(response);\n                console.log(\"done\");\n            }).catch(function (error) {\n                throw new Error(error);\n            });\n        }).catch(function (error) {\n            throw new Error(error);\n        });\n    }\n}\nexports.default = bot;\n//# sourceMappingURL=bot.js.map\n//# sourceMappingURL=bot.js.map"]}